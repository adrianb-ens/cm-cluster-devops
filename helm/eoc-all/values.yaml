redis:
  enabled: true
  fullnameOverride: redis
  architecture: standalone
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false
    ## @param auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: false
  replica:
    ## @param replica.replicaCount Number of Redis&reg; replicas to deploy
    ##
    replicaCount: 0
common-services:
  postgresql:
    global:
      postgresql:
        auth:
          postgresPassword: "postgres"
    auth:
      ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
      ##
      enablePostgresUser: true
      ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
      ##
      postgresPassword: "postgres"
      ## @param auth.username Name for a custom user to create
      ##
      username: "postgres"
      ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
      ##
      password: "postgres"
      ## @param auth.database Name for a custom database to create
      ##
      database: "cloudmanager"
      ## @param auth.replicationUsername Name of the replication user
      ##
      replicationUsername: repl_user
      ## @param auth.replicationPassword Password for the replication user. Ignored if `auth.existingSecret` with key `replication-password` is provided
      ##
      replicationPassword: ""
      ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
      ##
      existingSecret: ""
      ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ##
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
        replicationPasswordKey: replication-password
      ## @param auth.usePasswordFiles Mount credentials as a files instead of using an environment variable
      ##
      usePasswordFiles: false
    readReplicas:
        ## @param readReplicas.replicaCount Number of PostgreSQL read only replicas
        ##
        replicaCount: 0